module test;

import
    pegged.tohtml, std.path, std.file, std.process;

// generated by running the target of the "generate config"
import yatol;

// sample source
enum source1 = `
    unit a.$function;
    import(0:s8) r.d, s.d,t;
    import(1) s1, s256yy;
    struct Foo{}
    var s8*[]*[] q,h; var sreg j;
    var Foo[][] foo;
    virtual unit c;
    protection(private)
    protection(public) struct Foo { var sreg a,b,c; }
    virtual unit d;
    @const @inline function bar()
    {
        a;
        a++;
        a = b;
        a = b + c;
        a.b = c.d;
        a = a++;
        a = a[0][1];
        a = *derefer;
        a = b:ToType;
        a = b:ToType + c:ToType;;
        if (a == 0) {call(a);}
        var s8 a = 8;
        if (a == 0) {call(a);}
        else {call(1);}
        a.b(8);
        a.b(8, (c + d) * 8);
        a = call()++;
        b = ((1 + a) / (1 - a)) + (a * b);
        b = ((1:s32 + a * 2 * c++) / (1 - a:ToType)) + (a * b);
        b = b(b(b(8)));
        ++a = b + c;
        a = ++++b;
        super.call(a);
        super.call.call(a);
        parent?.call(a);
        a = b = c + d;
        a = b[c];
        a = b[c..d];
        if (a[8]?.b?.c == 8)
            callThis();
        else
            callThat();
        instances[a].instances[b] = 8;
        a = b[c].d[e].f[g];
        (a + b)++;
        a = (b[c](param0, param1 + stuff):u32):u64;
        a = b[c](param0).b[c](param0);
        var auto a = 8;
        is function*() aka FuncPtr;
        const auto a = (b[0].b[1].b[2])(8);
        if (const s8 a = call())
            do();
        switch(a)
        {
            on (0,1) doThis();
            on (2,3) doThat();
            on (4,6) {doThisAndThat();}
            else
            {
                a++++;
            }
        }

    }

    enum A
    {
        a = 0,
        b,
        c = 2
    }

    class Foo: Bar.bar, Baz{}

`;

void main()
{
    auto fname = __FILE_FULL_PATH__.dirName ~ "/../ya-tree.html";
    auto tree = Yatol(source1);
    toHTML!(Expand.ifNotMatch, "Literal", "Chain", "List", "Expression")(tree, fname);
    if (fname.exists)
        browse(fname);
}

