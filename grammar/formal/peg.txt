Yatol:

################################################################################
# Unit

    UnitContainer < MainUnit VirtualUnits?

    MainUnit < UnitDeclaration Declarations?
    VirtualUnits < VirtualUnit*
    VirtualUnit < Virtual UnitDeclaration Declarations?

################################################################################
# Declarations

    UnitDeclaration < Unit IdentifierChain Semicolon

    Declarations    < Declaration+
    Declaration     < ImportDeclaration
                    / ProtectionDeclaration
                    / VariableDeclaration
                    / ClassDeclaration
                    / StructDeclaration
                    / EnumDeclaration
                    / FunctionDeclaration
                    / InterfaceDeclaration
                    / AkaDeclaration
                    / VersionBlockDeclaration
                #   / AtAttributeSectionDeclaration

    SingleOrDeclarationBlock    < Declaration
                                / LeftCurly Declarations RightCurly

    ProtectionDeclaration   < Prot LeftParen Identifier RightParen
    StructDeclaration       < Struct Identifier LeftCurly Declarations? RightCurly
    ClassDeclaration        < Class Identifier InheritanceList? LeftCurly Declarations? RightCurly
    InterfaceDeclaration    < Interface Identifier InheritanceList? LeftCurly Declarations? RightCurly

    InheritanceList < Colon IdentifierChains
                  #  / Colon Super (Comma, IdentifierChains)? # nested class inherited the "super" type

    VariableDeclaration < StorageClass Static? Type VariableDeclarationList Semicolon

    VariableDeclarationList < VariableDeclarationItem (Comma VariableDeclarationItem)*

    VariableDeclarationItem < Identifier (Equal Initializer)?

    EnumDeclaration < Enum Identifier Cast? LeftCurly EnumMember (Comma EnumMember)* RightCurly

    EnumMember    < Identifier (Equal Initializer)?

    AkaDeclaration  < Is Type Aka Identifier Semicolon

################################################################################
# Version

    VersionBlockDeclaration < VersionConditions SingleOrDeclarationBlock (Else SingleOrDeclarationBlock)?

    VersionConditions < Version VersionParenExpression

    VersionParenExpression < LeftParen VersionOrExpression RightParen

    VersionOrExpression     < VersionAndExpression Pipe VersionOrExpression
                            / VersionAndExpression

    VersionAndExpression    < VersionPrimaryExpression Amp VersionAndExpression
                            / VersionPrimaryExpression

    VersionPrimaryExpression < Identifier / VersionParenExpression

################################################################################
# Imports declaration

    ImportDeclaration < Import ImportPriority? ImportList Semicolon
    ImportList <- IdentifierChain (Comma IdentifierChain)*
    ImportPriority <- LeftParen IntLiteral RightParen

################################################################################
# Function declaration

    FunctionDeclaration < FunctionHeader FunctionBody

    FunctionHeader < AtAttributes? Static? Function Identifier LeftParen FunctionParameters? RightParen Cast?

    FunctionBody < LeftCurly DeclarationOrStatement* RightCurly
                 / Semicolon

    FunctionPointerType < AtAttributes? Static? Function Mul LeftParen FunctionParameters? RightParen Cast?

    FunctionParameters < FunctionParameterGroup (Semicolon FunctionParameterGroup)*

    FunctionParameterGroup < StorageClass* Type IdentifierList

################################################################################
# AtAttribute

    # AtAttributeSectionDeclaration < AtAttribute Colon

    AtAttributes < AtAttribute*
    AtAttribute <- At Identifier / At Keyword

################################################################################
# StorageClass

    StorageClass < Var / Const

################################################################################
# Initializer

    Initializer < Expression
                / ArrayInitializer

    ArrayInitializer < LeftSquare ArrayInitializerElements? RightSquare

    ArrayInitializerElements < Initializer (Comma Initializer)*

################################################################################
# Mixed Declaration and Statement

    DeclarationOrStatement  < Declaration
                            / Statement

################################################################################
# Statements

    Statement   < EmptyStatment
                / ReturnStatement
                / ExpressionStatement
                / IfElseStatement
                / WhileStatement
                / ForeachStatement
                / ContinueStatement
                / BreakStatement
                / BlockStatement
                / SwitchStatement
                / TryOnFinallyStatement
                / ThrowStatement
                / VersionBlockStatement

    EmptyStatment < Semicolon

    ExpressionStatement < AssignExpression Semicolon

    IfElseStatement < If IfCondition DeclarationOrStatement ElseStatement?

    ElseStatement < Else DeclarationOrStatement

    WhileStatement < While LeftParen IfCondition RightParen DeclarationOrStatement

    ForeachStatement < Foreach LeftParen VariableDeclaration Semicolon SingleOrRangeExpression RightParen DeclarationOrStatement

    ReturnStatement < Return AssignExpression? Semicolon

    ContinueStatement < Continue AssignExpression? Semicolon

    BreakStatement < Break AtLabel? AssignExpression? Semicolon

    BlockStatement < LeftCurly DeclarationOrStatement* RightCurly

    AtLabel < LeftParen Identifier RightParen

    IfCondition < LeftParen Expression RightParen
                / LeftParen IfConditionVariable RightParen

    IfConditionVariable < StorageClass Type VariableDeclarationItem

    SwitchStatement < Switch LeftParen Expression RightParen LeftCurly OnMatchStatement* ElseStatement? RightCurly

    OnMatchStatement < On OnMatchExpressions DeclarationOrStatement

    OnMatchExpressions < LeftParen SingleOrRangeExpression (Comma SingleOrRangeExpression)* RightParen

    SingleOrRangeExpression < RangeExpression
                            / Expression

    TryOnFinallyStatement < Try DeclarationOrStatement OnExceptionStatement* FinallyStatement?

    OnExceptionInstance < Type Identifier

    OnExceptionStatement < On LeftParen OnExceptionInstance (Comma OnExceptionInstance)* RightParen DeclarationOrStatement

    FinallyStatement < Finally DeclarationOrStatement

    ThrowStatement < Throw UnaryExpression Semicolon

    VersionBlockStatement < VersionConditions DeclarationOrStatement (Else DeclarationOrStatement)?

################################################################################
# Composites expressions

    AssignExpression    < Expression AssignOperator AssignExpression
                        / Expression

    Expression  < BinaryExpression
                / UnaryExpression

    BinaryExpression < Expression Operator Expression

    RangeExpression < Expression DotDot Expression

################################################################################
# UnaryExpression

    UnaryExpression < UnaryPrefix UnaryExpression
                    / PrimaryExpression PostfixExpression*

################################################################################
# PostfixExpression

    PostfixExpression   < PlusPlus
                        / MinusMinus
                        / IndexExpression
                        / SliceExpression
                        / CallParameters
                        / Cast
                        / Dot PrimaryExpression
                        / OptAccess PrimaryExpression

    IndexExpression < LeftSquare Expression RightSquare

    SliceExpression < LeftSquare Expression DotDot Expression RightSquare

    CallParameters < LeftParen Expression? (Comma Expression)* RightParen

################################################################################
# Primary Expression

    PrimaryExpression   < Identifier
                        / NumberLiteral
                        / StringLiteral
                        / ParenExpression
                        / Super
                        / ValueKeyword
                        / ArrayInitializer

    ParenExpression < LeftParen Expression RightParen

################################################################################
# Cast

    Cast <- Colon Type

################################################################################
# Type

    Type    < TypeIdentifier TypeModifiers?
            / LeftParen TypeIdentifier RightParen TypeModifiers?
            / Auto

    TypeIdentifier  < BasicType
                    / IdentifierChain
                    / FunctionPointerType
                    / typeIdentifiersUnion

    TypeIdentifierUnion < LeftSquare TypeIdentifier (Pipe TypeIdentifier)+ RightSquare

    TypeModifiers < TypeModifier TypeModifiers?

    TypeModifier < LeftRightSquares / Mul / StaticArrayDim

    StaticArrayDim < LeftSquare Expression RightSquare

################################################################################
# List, chain, etc

    IdentifierChains < IdentifierChain (Comma IdentifierChain)*

    IdentifierChain < Identifier (Dot Identifier)*

    IdentifierList  < Identifier (Comma Identifier)*

################################################################################
# Comments and spacing

    Spacing <- :(' ' / '\t' / '\r' / '\n' / '\r\n' / Comment)*

    Comment <~ LineComment / StarComment

    LineComment <- : "//" (!Eol .)* :Eol
    StarComment <- : "/*" (!"*/" .)* :"*/"

################################################################################
# Identifier, literals, symbols, operators

    NumberLiteral   < IntLiteral
                    / HexLiteral
                    / FloatLiteral

    # also used as char literal, implicit or infered from cast
    StringLiteral   <- : "\"" (!"\"" .)* :"\""

    HexLiteral  <~ HexPrefix HexDigits+ HexLiteralSuffix?
    HexLiteralSuffix <- Colon BasicType

    FloatLiteral  <~ Minus? Num+ Dot Num+ FloatLiteralSuffix?
    FloatLiteralSuffix <- Colon BasicFloatType

    IntLiteral  <~ Minus? Num+ IntLiteralSuffix?
    IntLiteralSuffix <- Colon BasicIntegerType

    Eol <- "\r\n" / '\n'

    Identifier  <~ !Keyword (Alpha) (AlphaNum)*
                /  DollarKw

    DollarKw <~Dollar Keyword

    AssignOperator < Equal / DivEqual / MulEqual / ModEqual / MinusEqual / PlusEqual / AmpEqual / XorEqual / PipeEqual / LShiftEqual / RShiftEqual

    Operator < RelOperator / Mul / Div / Mod / Plus / Minus / LShift / RShift / Amp / Pipe / Xor

    LeftRightSquares < LeftSquare RightSquare

    RelOperator < EqualEqual
                / NotEqual
                / Lesser
                / Greater
                / GreaterEqual
                / LesserEqual

    UnaryPrefix < Mul / PlusPlus / MinusMinus / Amp / Bang

    UnarySuffix < PlusPlus / MinusMinus

    OptAccess   <~ Qmark Dot
    Ellipsis    <~ Dot Dot Dot
    DotDot      <~ Dot Dot
    EqualEqual  <~ Equal Equal
    NotEqual    <~ Bang Equal
    Lesser      <- '<'
    Greater     <- '>'
    GreaterEqual<~ Greater Equal
    LesserEqual <~ Lesser Equal

    PlusPlus    <~ Plus Plus
    MinusMinus  <~ Minus Minus

    HexDigits   <- (HexAlpha|Num)
    AlphaNum    <- (Alpha|Num)
    Num         <- [0-9]
    HexAlpha    <- [a-fA-F]
    Alpha       <- [a-zA-Z_]

    Equal       <- '='
    DivEqual    <- '/='
    MulEqual    <- '*='
    ModEqual    <- '%='
    MinusEqual  <- '-='
    PlusEqual   <- '+='
    AmpEqual    <- '&='
    XorEqual    <- '^='
    PipeEqual   <- '|='
    LShiftEqual <- '<<='
    RShiftEqual <- '>>='

    Div         <- '/'
    Mul         <- '*'
    Mod         <- '%'
    Dot         <- '.'
    Semicolon   <- ';'
    Colon       <- ':'
    Comma       <- ','
    LeftParen   <- '('
    RightParen  <- ')'
    LeftSquare  <- '['
    RightSquare <- ']'
    LeftCurly   <- '{'
    RightCurly  <- '}'
    Minus       <- '-'
    Plus        <- '+'
    At          <- '@'
    Bang        <- '!'
    Amp         <- '&'
    Qmark       <- '?'
    Dollar      <- '$'
    LShift      <- "<<"
    RShift      <- ">>"
    Xor         <- "^"
    Pow         <- "^^"
    Pipe        <- "|"

    HexPrefix   <- "0x" / "0X"

################################################################################
# Keywords

    Keyword < BasicType
            / Unit
            / Prot
            / Else
            / If
            / Unit
            / Prot
            / Else
            / If
            / Import
            / Interface
            / Virtual
            / Struct
            / Class
            / Function
            / Static
            / Return
            / Break
            / Continue
            / While
            / Var
            / Const
            / Aka
            / Auto
            / Is
            / Foreach
            / Switch
            / Null
            / On
            / Bool
            / Enum
            / ValueKeyword
            / Version
            / Try
            / Finally
            / Throw

    ValueKeyword    < Null
                    / False
                    / True

    BasicType   < BasicFloatType
                / BasicIntegerType
                / Super

    BasicFloatType  < F64
                    / F32

    BasicIntegerType    < S64
                        / S32
                        / S16
                        / S8
                        / U64
                        / U32
                        / U16
                        / U8
                        / UREG
                        / SREG
                        / Bool

    Unit    <- "unit"
    Prot    <- "protection"
    Else    <- "else"
    If      <- "if"
    Import  <- "import"
    Interface <- "interface"
    Virtual <- "virtual"
    Struct  <- "struct"
    Class   <- "class"
    Function<- "function"
    Static  <- "static"
    Return  <- "return"
    Break   <- "break"
    Continue<- "continue"
    While   <- "while"
    Var     <- "var"
    Const   <- "const"
    Aka     <- "aka"
    Auto    <- "auto"
    Is      <- "is"
    Foreach <- "foreach"
    On      <- "on"
    Switch  <- "switch"
    Null    <- "null"
    Enum    <- "enum"
    Version <- "version"
    Try     <- "try"
    Finally <- "finally"
    Throw   <- "throw"

    SREG    <- "sreg"
    UREG    <- "ureg"
    F64     <- "f64"
    F32     <- "f32"
    S64     <- "s64"
    S32     <- "s32"
    S16     <- "s16"
    S8      <- "s8"
    U64     <- "u64"
    U32     <- "u32"
    U16     <- "u16"
    U8      <- "u8"
    Bool    <- "bool"
    True    <- "true"
    False   <- "false"
    Super   <- "super"
