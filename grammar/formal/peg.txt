Styx:
################################################################################
# SheBang line

    Everything  <- SheBangLine? Unit
    SheBangLine <- "#!" (!endOfLine .)* endOfLine

################################################################################
# Unit

    Unit < UnitDeclaration Declaration*

################################################################################
# Declarations

    UnitDeclaration < UnitKw IdentifierChain Semicolon

    Declaration     < AtAttributes? ImportDeclaration
                    / AtAttributes? ProtectionDeclaration
                    / AtAttributes? VariableDeclaration
                    / AtAttributes? ClassDeclaration
                    / AtAttributes? StructDeclaration
                    / AtAttributes? UnionDeclaration
                    / AtAttributes? EnumDeclaration
                    / AtAttributes? FunctionDeclaration
                    / AtAttributes? InterfaceDeclaration
                    / AtAttributes? AkaDeclaration
                    / AtAttributes? TemplateDeclaration
                    / VersionBlockDeclaration
                    / LabelDeclaration
                #   / AtAttributeSectionDeclaration

    SingleOrDeclarationBlock    < Declaration
                                / LeftCurly Declaration* RightCurly

    ProtectionDeclaration   < Prot LeftParen Identifier RightParen
    StructDeclaration       < Struct Identifier TemplateParameters? InheritanceList? LeftCurly Declaration* RightCurly
    UnionDeclaration        < Union Identifier TemplateParameters? LeftCurly Declaration* RightCurly
    ClassDeclaration        < Class Identifier TemplateParameters? InheritanceList? LeftCurly Declaration* RightCurly
    InterfaceDeclaration    < Interface Identifier TemplateParameters? InheritanceList? LeftCurly Declaration* RightCurly
    TemplateDeclaration     < Template Identifier TemplateParameters LeftCurly Declaration* RightCurly
    LabelDeclaration        < Label Identifier Semicolon

    InheritanceList < Colon IdentifierChain (Comma IdentifierChain)*

    VariableDeclaration < Static? StorageClass Type VariableDeclarationList Semicolon

    VariableDeclarationList < VariableDeclarationItem (Comma VariableDeclarationItem)*

    VariableDeclarationItem < Identifier (Equal Initializer)?

    EnumDeclaration < Enum Identifier Cast? LeftCurly EnumMember (Comma EnumMember)* RightCurly

    EnumMember      < Identifier (Equal Initializer)?

    AkaDeclaration  < Aka Identifier Equal Type Semicolon

################################################################################
# Template parameters

    TemplateParameters  < Lesser Identifier? (Comma Identifier)* Greater
    TemplateInstance    < Lesser Type (Comma Type)* Greater

################################################################################
# Version

    VersionBlockDeclaration < VersionConditions SingleOrDeclarationBlock (Else SingleOrDeclarationBlock)?

    VersionConditions < Version VersionParenExpression

    VersionParenExpression < LeftParen VersionOrExpression RightParen

    VersionOrExpression     < VersionAndExpression Pipe VersionOrExpression
                            / VersionAndExpression

    VersionAndExpression    < VersionPrimaryExpression Amp VersionAndExpression
                            / VersionPrimaryExpression

    VersionPrimaryExpression < Bang? Identifier / Bang? VersionParenExpression

################################################################################
# Imports declaration

    ImportDeclaration < Import ImportPriority? ImportList Semicolon
    ImportList <- IdentifierChain (Comma IdentifierChain)*
    ImportPriority <- LeftParen IntLiteral RightParen

################################################################################
# Function declaration

    FunctionType < Static? Function Identifier? TemplateParameters? LeftParen FunctionParameters? RightParen Cast?

    FunctionDeclaration <  FunctionType FunctionBody

    FunctionBody < LeftCurly DeclarationOrStatement* RightCurly
                 / Semicolon

    FunctionParameters < FunctionParameterGroup (Semicolon FunctionParameterGroup)*

    FunctionParameterGroup < StorageClass* Type IdentifierList

################################################################################
# AtAttribute

    # AtAttributeSectionDeclaration < AtAttribute Colon

    AtAttributes    < AtAttribute*
    AtAttribute     < At Identifier AtAttributeParameters?
                    / At Keyword AtAttributeParameters?

    AtAttributeParameters < LeftParen PrimaryExpression (Comma PrimaryExpression)* RightParen

################################################################################
# StorageClass

    StorageClass < Var / Const / Init

################################################################################
# Initializer

    Initializer < Expression
                / ArrayInitializer

    ArrayInitializer < LeftSquare ArrayInitializerElements? RightSquare

    ArrayInitializerElements < Initializer (Comma Initializer)*

################################################################################
# Mixed Declaration and Statement

    DeclarationOrStatement  < Declaration
                            / Statement

################################################################################
# Statements

    Statement   < EmptyStatment
                / ReturnStatement
                / ExpressionStatement
                / IfElseStatement
                / WhileStatement
                / ForeachStatement
                / ContinueStatement
                / BreakStatement
                / GotoStatement
                / BlockStatement
                / SwitchStatement
                / TryOnFinallyStatement
                / ThrowStatement
                / VersionBlockStatement
                / AssertStatement

    EmptyStatment < Semicolon

    ExpressionStatement < AssignExpression Semicolon

    IfElseStatement < If IfCondition DeclarationOrStatement ElseStatement?

    ElseStatement < Else DeclarationOrStatement

    WhileStatement < While IfCondition DeclarationOrStatement

    ForeachStatement < Foreach LeftParen ForeachVariableDeclaration (Comma ForeachVariableDeclaration)* Semicolon SingleOrRangeExpression RightParen DeclarationOrStatement

    ForeachVariableDeclaration < StorageClass Type Identifier

    ReturnStatement < Return AssignExpression? Semicolon

    ContinueStatement < Continue AtLabel? AssignExpression? Semicolon

    BreakStatement  < Break AtLabel? AssignExpression? Semicolon

    GotoStatement   < Goto AtLabel? AssignExpression? Semicolon

    BlockStatement < LeftCurly DeclarationOrStatement* RightCurly

    AtLabel < LeftParen At Identifier RightParen

    IfCondition < LeftParen Expression RightParen
                / Expression
                / LeftParen IfConditionVariable RightParen
                / IfConditionVariable

    IfConditionVariable < StorageClass Type VariableDeclarationItem

    SwitchStatement < Switch LeftParen Expression RightParen LeftCurly OnMatchStatement* ElseStatement? RightCurly

    OnMatchStatement < On OnMatchExpressions DeclarationOrStatement

    OnMatchExpressions < LeftParen SingleOrRangeExpression (Comma SingleOrRangeExpression)* RightParen

    SingleOrRangeExpression < RangeExpression
                            / Expression

    TryOnFinallyStatement < Try DeclarationOrStatement OnExceptionStatement* FinallyStatement?

    OnExceptionInstance < Type Identifier

    OnExceptionStatement < On LeftParen OnExceptionInstance (Comma OnExceptionInstance)* RightParen DeclarationOrStatement

    FinallyStatement < Finally DeclarationOrStatement

    ThrowStatement < Throw UnaryExpression Semicolon

    VersionBlockStatement < VersionConditions DeclarationOrStatement (Else DeclarationOrStatement)?

    AssertStatement < Assert LeftParen Expression RightParen Semicolon

################################################################################
# Composites expressions

    AssignExpression    < Expression AssignOperator AssignExpression
                        / Expression

    Expression  < BinaryExpression
                / UnaryExpression

    BinaryExpression < Expression Operator Expression

    RangeExpression < Expression DotDot Expression

################################################################################
# UnaryExpression

    UnaryExpression < UnaryPrefix UnaryExpression
                    / PrimaryExpression PostfixExpression*

################################################################################
# PostfixExpression

    PostfixExpression   < PlusPlus
                        / MinusMinus
                        / IndexExpression
                        / SliceExpression
                        / CallParameters
                        / Cast
                        / Dot PrimaryExpression
                        / OptAccess PrimaryExpression

    IndexExpression < LeftSquare Expression RightSquare

    SliceExpression < LeftSquare Expression DotDot Expression RightSquare

    CallParameters < LeftParen Expression? (Comma Expression)* RightParen

################################################################################
# Primary Expression

    PrimaryExpression   < CompilerEcho
                        / Identifier TemplateInstance?
                        / NumberLiteral
                        / StringLiteral
                        / ParenExpression
                        / Super
                        / ValueKeyword
                        / ArrayInitializer

    ParenExpression < LeftParen Expression RightParen

################################################################################
# Compiler echo

    CompilerEcho    < Echo LeftParen Identifier (Comma EchoParameter)* RightParen

    EchoParameter   < LeftCurly Expression Semicolon RightCurly
                    / Type
                    / Keyword

################################################################################
# Cast

    Cast <- Colon Type

################################################################################
# Type

    Type    < TypeIdentifier TypeModifiers?
            / LeftParen TypeIdentifier RightParen TypeModifiers? # the "unambiguous form"

    TypeIdentifier  < Auto
                    / BasicType
                    / FunctionType
                    / TypeIdentifierParts

    TypeIdentifierParts < TypeIdentifierPart (Dot TypeIdentifierPart)*
    TypeIdentifierPart  < Identifier TemplateInstance ?

    TypeModifiers < TypeModifier TypeModifiers?

    TypeModifier < LeftRightSquares / Mul / StaticArrayDim

    StaticArrayDim < LeftSquare Expression RightSquare

################################################################################
# List and chain

    IdentifierChain < Identifier (Dot Identifier)*

    IdentifierList  < Identifier (Comma Identifier)*

################################################################################
# Comments and spacing

    Spacing <- :(' ' / '\t' / '\r' / '\v' / '\f' / '\n' / '\r\n' / Comment)*

    Comment <~ LineComment / StarComment

    LineComment <- : "//" (!Eol .)* :Eol
    StarComment <- : "/*" (!"*/" .)* :"*/"

################################################################################
# Identifier, literals, symbols, operators

    NumberLiteral   < IntLiteral
                    / HexLiteral
                    / FloatLiteral

    # also used as char literal, implicit or infered from cast
    StringLiteral   <- : "\"" (!"\"" .)* :"\""
                    / : "`" (!"`" .)* :"`"

    HexLiteral  <~ HexPrefix HexDigits+ HexLiteralSuffix?
    HexLiteralSuffix <- Colon BasicType

    FloatLiteral  <~ Num+ Dot Num+ FloatLiteralSuffix?
                     / Num+ Exp Num+ FloatLiteralSuffix?
    Exp <- "e" / "E"
    FloatLiteralSuffix <- Colon BasicFloatType

    IntLiteral  <~ Num+ IntLiteralSuffix?
    IntLiteralSuffix <- Colon BasicIntegerType

    Eol <- "\r\n" / '\n'

    Identifier  <~ !KeywordList [a-zA-Z_][a-zA-Z0-9_]*
                /  DollarKw

    DollarKw    <~ Dollar Keyword

    AssignOperator < Equal / DivEqual / MulEqual / ModEqual / MinusEqual / PlusEqual / AmpEqual / XorEqual / PipeEqual / LShiftEqual / RShiftEqual

    Operator < RelOperator / Mul / Div / Mod / Plus / Minus / LShift / RShift / Amp / Pipe / Xor / In

    LeftRightSquares < LeftSquare RightSquare

    RelOperator < EqualEqual
                / NotEqual
                / Lesser
                / Greater
                / GreaterEqual
                / LesserEqual

    UnaryPrefix < Mul / PlusPlus / MinusMinus / Amp / Bang / Plus / Minus / Tidle

    UnarySuffix < PlusPlus / MinusMinus

    OptAccess   <~ Qmark Dot
    Ellipsis    <~ Dot Dot Dot
    DotDot      <~ Dot Dot
    EqualEqual  <~ Equal Equal
    NotEqual    <~ Bang Equal
    Lesser      <- '<'
    Greater     <- '>'
    GreaterEqual<~ Greater Equal
    LesserEqual <~ Lesser Equal

    PlusPlus    <~ Plus Plus
    MinusMinus  <~ Minus Minus

    HexDigits   <- (HexAlpha|Num)
    AlphaNum    <- (Alpha|Num)
    Num         <- [0-9]
    HexAlpha    <- [a-fA-F]
    Alpha       <- [a-zA-Z_]

    Equal       <- '='
    DivEqual    <- '/='
    MulEqual    <- '*='
    ModEqual    <- '%='
    MinusEqual  <- '-='
    PlusEqual   <- '+='
    AmpEqual    <- '&='
    XorEqual    <- '^='
    PipeEqual   <- '|='
    LShiftEqual <- '<<='
    RShiftEqual <- '>>='

    Div         <- '/'
    Mul         <- '*'
    Mod         <- '%'
    Dot         <- '.'
    Semicolon   <- ';'
    Colon       <- ':'
    Comma       <- ','
    LeftParen   <- '('
    RightParen  <- ')'
    LeftSquare  <- '['
    RightSquare <- ']'
    LeftCurly   <- '{'
    RightCurly  <- '}'
    Minus       <- '-'
    Plus        <- '+'
    Tidle       <- '~'
    At          <- '@'
    Bang        <- '!'
    Amp         <- '&'
    Qmark       <- '?'
    Dollar      <- '$'
    LShift      <- "<<"
    RShift      <- ">>"
    Xor         <- "^"
    Pow         <- "^^"
    Pipe        <- "|"

    HexPrefix   <- "0x" / "0X"

################################################################################
# Keywords

    Keyword < KeywordList !Identifier

    KeywordList < BasicType
            / UnitKw
            / Prot
            / Else
            / If
            / Prot
            / Else
            / If
            / Import
            / Interface
            / Struct
            / Class
            / Function
            / Static
            / Return
            / Break
            / Continue
            / While
            / Var
            / Const
            / Aka
            / Auto
            / Foreach
            / Switch
            / Null
            / On
            / Bool
            / Enum
            / ValueKeyword
            / Version
            / Try
            / Finally
            / Throw
            / Union
            / Assert
            / Label
            / Template
            / Goto
            / Echo
            #/ In

    ValueKeyword    < Null
                    / False
                    / True

    BasicType   < BasicFloatType
                / BasicIntegerType
                / Super

    BasicFloatType  < F64
                    / F32

    BasicIntegerType    < S64
                        / S32
                        / S16
                        / S8
                        / U64
                        / U32
                        / U16
                        / U8
                        / USIZE
                        / SSIZE
                        / Bool

    UnitKw  <- "unit"
    Prot    <- "protection"
    Else    <- "else"
    If      <- "if"
    Import  <- "import"
    Interface <- "interface"
    Struct  <- "struct"
    Class   <- "class"
    Function<- "function"
    Static  <- "static"
    Return  <- "return"
    Break   <- "break"
    Continue<- "continue"
    While   <- "while"
    Var     <- "var"
    Const   <- "const"
    Aka     <- "aka"
    Auto    <- "auto"
    Foreach <- "foreach"
    On      <- "on"
    Switch  <- "switch"
    Null    <- "null"
    Enum    <- "enum"
    Version <- "version"
    Try     <- "try"
    Finally <- "finally"
    Throw   <- "throw"
    Union   <- "union"
    In      <- "in"
    Assert  <- "assert"
    Label   <- "label"
    Template<- "template"

    SSIZE   <- "ssize"
    USIZE   <- "usize"
    F64     <- "f64"
    F32     <- "f32"
    S64     <- "s64"
    S32     <- "s32"
    S16     <- "s16"
    S8      <- "s8"
    U64     <- "u64"
    U32     <- "u32"
    U16     <- "u16"
    U8      <- "u8"
    Bool    <- "bool"
    True    <- "true"
    False   <- "false"
    Super   <- "super"
    Init    <- "init"
    Goto    <- "goto"
    Echo    <- "echo"

